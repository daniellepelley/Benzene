using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Benzene.Clients;
using Benzene.Clients.HealthChecks;
using Benzene.HealthChecks.Core;
using Benzene.Results;
using System.Diagnostics.CodeAnalysis;

namespace Platform.Service.Clients.User
{
    [ExcludeFromCodeCoverage]
    public class UserServiceClient : IUserServiceClient
    {
        private readonly IBenzeneMessageClientFactory _clientFactory;

        public UserServiceClient(IBenzeneMessageClientFactory clientFactory)
        {
            _clientFactory = clientFactory;
        }

        public string HashCode => "2b8ce408c286c3e00fd2145dc81c3c71751896baf49b0c3f3d07fffeaf07ae07";

        public Task<IBenzeneResult<UserDtoMessageWrapper>> GetUserAsync(GetUserMessage message)
        {
            return GetUserAsync(message, null);
        }

        public async Task<IBenzeneResult<UserDtoMessageWrapper>> GetUserAsync(GetUserMessage message, IDictionary<string, string> headers)
        {
            using (var client = _clientFactory.Create("User", "user:get"))
            {
                return await client.SendMessageAsync<GetUserMessage, UserDtoMessageWrapper>("user:get", message, headers);
            }
        }

        public async Task<IBenzeneResult<HealthCheckResponse>> HealthCheckAsync()
        {
            using (var client = _clientFactory.Create("User", "healthcheck"))
            {
                var benzeneResult = await client.SendMessageAsync<NullPayload, HealthCheckResponse>("healthcheck", new NullPayload(), null);
                return benzeneResult.Status != BenzeneResultStatus.Ok
                    ? benzeneResult
                    : BenzeneResult.Ok(ClientHealthCheckProcessor.Process(benzeneResult.Payload, HashCode) as HealthCheckResponse);
            }
        }
    }
}
